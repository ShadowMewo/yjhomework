# Git和GitHub学习笔记

## Git简介
Git是一个分布式版本控制系统，由Linus Torvalds在2005年开发，主要用于代码的版本控制。它能够记录代码的每一次修改，支持多用户协作，是现代软件开发中不可或缺的工具。

### GitHub注册
- 访问[GitHub官网](https://github.com/)进行注册。
- 注册后，可以创建仓库、参与开源项目等。

## Git基础操作
### 文件状态
- **committed**：文件已安全保存在本地数据库。
- **modified**：文件已修改，但未提交。
- **staged**：修改的文件已放入下次提交的清单中。

### 工作区域
- **工作目录**：存放项目文件的地方。
- **暂存区域**：下次提交时保存的文件清单。
- **Git目录**：保存所有版本的数据库。

- 设置默认文本编辑器和差异分析工具。

### 常用命令
- **初始化仓库**：`git init`
- **克隆仓库**：`git clone [url]`
- **查看状态**：`git status`
- **添加到暂存区**：`git add 文件名` 或 `git add -A`
- **提交更新**：`git commit -m "提交信息"`
- **查看提交历史**：`git log`
- **回退到旧版本**：`git reset --hard 版本号`
- **创建远程仓库**：
  1. 生成SSH key。
  2. 将公钥添加到GitHub账户。
  3. 创建仓库并关联本地仓库：`git remote add origin git@github.com:用户名/仓库名.git`
  4. 推送到远程仓库：`git push -u origin master`

## 分支管理
### 分支概念
- 分支是指向特定commit的指针。

### 创建与合并分支
- 查看分支：`git branch`
- 创建分支：`git branch 分支名`
- 切换分支：`git checkout 分支名`
- 创建并切换分支：`git checkout -b 分支名`
- 合并分支：`git merge 分支名`
- 删除分支：`git branch -d 分支名`

### 冲突处理
- 当合并时出现冲突，需要手动解决后再次提交。

### 远程分支
- 推送远程分支：`git push origin 分支名`
- 创建与远程分支对应的本地分支：`git checkout -b 分支名 origin/分支名`
- 建立本地分支与远程分支的关联：`git branch --set-upstream-to origin/分支名 分支名`

## 忽略文件
- 创建`.gitignore`文件，列出需要忽略的文件类型或文件名。

## GitHub使用
### 基本概念
- **Repository**：存放项目代码的仓库。
- **Star**：收藏项目。
- **Fork**：复制项目到自己的仓库。
- **Pull Request**：向项目提交修改请求。
- **Watch**：关注项目更新。
- **Issue**：提出问题或讨论。
- **Gist**：粘贴代码片段。

### 开源项目贡献
1. 提交Issue报告问题或建议。
2. Fork项目，修改后提交Pull Request。

### 团队合作
- 使用Collaborators功能邀请团队成员。
- Fork & Pull Request流程：
  1. Fork项目到自己的仓库。
  2. Clone到本地修改。
  3. 提交Pull Request等待合并。
